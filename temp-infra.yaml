AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to create a VPC and an EC2 instance'

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: Must be a valid EC2 instance type

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
    Default: SSH

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet'

  # Route Table for Public Subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'

  # Route to Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Route Table with Subnet
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Group for EC2 Instance
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # SSH access
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # HTTP access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroup'

  # EC2 Instance
  # echo "<h1>Hello from EC2 instance in ${AWS::StackName}</h1>" > /var/www/html/index.html
  # echo " <img src="https://biffkittz-monitoring-data.s3.us-east-2.amazonaws.com/backyard.jpg" alt="backyard"> " > /var/www/html/index.html
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64}}'
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Instance'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          
          # Create the index.html file
          cat << 'EOF' > /var/www/html/index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Monitoring with PowerShell</title>
              <meta http-equiv="refresh" content="15">
              <style>
                  body {
                      font-family: Arial, sans-serif;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 20px;
                      background-color: #f4f4f4;
                  }
                  .container {
                      background-color: white;
                      padding: 30px;
                      border-radius: 8px;
                      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                  }
                  h1 {
                      color: #333;
                      text-align: center;
                  }
                  p {
                      color: #666;
                      line-height: 1.6;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>You are monitoring!</h1>
                  <p>Site refreshes every 15 seconds with updated data</p>
              </div>

              <div>
                <p>Latest security footage:</p>
                <img src="https://biffkittz-monitoring-data.s3.us-east-2.amazonaws.com/backyard.jpg" alt="backyard">
              </div>

              <div>
                <p>Latest system stats:</p>
                <div id="monitoring-data"></div>
              </div>

              <script>
                  async function fetchMonitoringData() {
                      try {
                          fetch('https://biffkittz-monitoring-data.s3.us-east-2.amazonaws.com/df-output.json')
                            .then(response => {
                              if (!response.ok) {
                                console.log("Failed to fetch monitoring data");
                              }
                              return response.json();
                            })
                            .then(data => {
                              const dataContainer = document.getElementById("monitoring-data");
                              const table = document.createElement('table');
                              table.style.borderCollapse = 'collapse';

                              // Create table header
                              const thead = document.createElement('thead');
                              const headerRow = document.createElement('tr');
                              for (const key in data[0]) {
                                const th = document.createElement('th');
                                th.textContent = key.charAt(0).toUpperCase() + key.slice(1); // Capitalize first letter
                                th.style.border = '1px solid black';
                                th.style.padding = '8px';
                                headerRow.appendChild(th);
                              }
                              thead.appendChild(headerRow);
                              table.appendChild(thead);

                              data.shift(); // Remove header row from data

                              // Create table body
                              const tbody = document.createElement('tbody');
                              data.forEach(rowData => {
                                const tr = document.createElement('tr');
                                for (const key in rowData) {
                                  const td = document.createElement('td');
                                  td.textContent = rowData[key];
                                  td.style.border = '1px solid black';
                                  td.style.padding = '8px';
                                  tr.appendChild(td);
                                }
                                tbody.appendChild(tr);
                              });
                              table.appendChild(tbody);

                              dataContainer.appendChild(table);

                              console.log(data);
                            });
                      } catch (error) {
                          console.log('Error fetching monitoring data');
                      }
                  }

                  // Fetch data on page load
                  fetchMonitoringData();
              </script>
          </body>
          </html>
          EOF

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'

  PublicSubnetId:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet-ID'

  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance

  InstancePublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp

  WebsiteURL:
    Description: URL of the website
    Value: !Sub 'http://${EC2Instance.PublicIp}'